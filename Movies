const express = require("express");
const app = express();
app.use(express.json());
const path = require("path");
const { open } = require("sqlite");
const dbPath = path.join(__dirname, "moviesData.db");
const sqlite3 = require("sqlite3");

let database = null;

const initializeDBAndServer = async () => {
  try {
    database = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("Server is running at http://localhost:3000/");
    });
  } catch (e) {
    console.log(`DATABASE ERROR ${e.message}`);
    process.exit(1);
  }
};

initializeDBAndServer();

const convertDbObjectToResponseObj = (dbObject) => {
  return {
    movie_id: dbObject.movie_id,
    director_id: dbObject.director_id,
    movie_name: dbObject.movie_name,
    lead_actor: dbObject.lead_actor,
  };
};

const convertDbObjectToMovieNames = (dbObject) => {
  return {
    movie_name: dbObject.movie_name,
  };
};

const convertDbObjToDirectorObj = (dbObject) => {
  return {
    director_id: dbObject.director_id,
    director_name: dbObject.director_name,
  };
};

const getMovieNames = (dbObj) => {
  return {
    movie_name: dbObj.movie_name,
  };
};

// GET ONLY MOVIES
app.get("/movies/", async (request, response) => {
  const getMoviesQuery = `
    SELECT * FROM movie;`;

  const moviesArray = await database.all(getMoviesQuery);

  response.send(
    moviesArray.map((eachItem) => convertDbObjectToMovieNames(eachItem))
  );
});

// GET MOVIES ON CONDITION
app.get("/movies/:movieId/", async (request, response) => {
  const { movieId } = request.params;

  const getMoviesQuery = `
    SELECT
       * 
    FROM 
       movie
    WHERE 
    movie_id = ${movieId};`;

  const moviesArray = await database.get(getMoviesQuery);

  response.send(convertDbObjectToResponseObj(moviesArray));
});

// GET DIRECTORS LIST
app.get("/directors/", async (request, response) => {
  const getDirectorQuery = `
    SELECT 
      *
    FROM 
      director ; `;
  const directorArray = await database.all(getDirectorQuery);
  response.send(
    directorArray.map((eachItem) => convertDbObjToDirectorObj(eachItem))
  );
});

//GET MOVIE NAMES BY SPECIFIC DIRECTORS
app.get("/directors/:directorId/movies/", async (request, response) => {
  const { directorId } = request.params;

  const getDirectorQuery = `
    SELECT 
      *
    FROM 
      movie
    WHERE 
     director_id = ${directorId}; `;
  const directorArray = await database.all(getDirectorQuery);
  response.send(directorArray.map((eachItem) => getMovieNames(eachItem)));
});
//post query
app.post("/movies/", async (request, response) => {
  const { directorId, movieName, leadActor } = request.body;
  const postQuery = `
    INSERT INTO movie(director_id , movie_name , lead_actor)
    VALUES (${directorId},
            '${movieName}',
            '${leadActor}');`;
  await database.run(postQuery);
  response.send("Movie Successfully Added");
});
//PUT QUERY

app.put("/movies/:movieId/", async (request, response) => {
  const { directorId, movieName, leadActor } = request.body;
  const { movieId } = request.params;
  const putQuery = `
    UPDATE movie
    SET
     director_id = ${directorId} ,
     movie_name = ${movieName},
     lead_actor = ${leadActor}
     WHERE movie_id = ${movieId};`;
  await database.run(putQuery);
  response.send("Movie Details Updated");
});

//DELETE QUERY

app.delete("/movies/:movieId/", async (request, response) => {
  const { movieId } = request.params;
  const deleteQuery = `
    DELETE FROM movie
    WHERE 
    movie_id = ${movieId};`;
  await database.run(deleteQuery);
  response.send("Movie Removed");
});

module.exports = app;
